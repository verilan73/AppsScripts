/**Script pulls in a collection of fields from a sheet which includes associated calendar eventIDs. 
 * It then pulls in from another sheet where absences are recorded, and flattens this data, removing empty days. 
 * It then compares the two arrays and creates a new array containing the new absences.
 * Then it creates events for these new entries, and appends this list of new events to the original data set.
 */


/**I tried to compare the arrays to find similar rows, but I couldn't get anything to work. In the end, I 
 * solved this by joining the 3 core elements of each row to create a single element, and then compared this 
 * single element from the 2 arrays. This approach worked.
 */


const CALENDAR_ID = "";
function updateCalendar(){
  const sourceSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Non-teaching Staff Attendance");
  const eventsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("CalendaredEvents");
  const cal = CalendarApp.getCalendarById(CALENDAR_ID);

  //Start by pulling in the original table of events which includes eventID data, but only keep the first 3 columns
  //Join the values from columns 1-3 and add this as a 4th column
  let originalData = eventsSheet.getDataRange()
                                .getValues()
                                .map(function(row){
                                  return row.slice(0,3);
                                })
                                .map(function(row){
                                  return row.concat(row.join(''));
                                });

  //Get source data, remove unnnecessary first 2 rows, and unnecessary columns C to K. Keep the name as it will be needed.
  let sourceData = sourceSheet.getDataRange().getValues();
  sourceData.shift();
  sourceData.shift();
  let data = sourceData.map(function(row){
    return row.slice(0,2).concat(row.slice(11));
  })
  /**Iterate through, selecting only those cells where there are values
   * Note that starting from i=1 and j=2 ensures that the header row and the email & name columns are
   * not included in the filtering process.
   */
  let result=[];
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    for (var j = 2; j < row.length; j++) {
      var element = row[j];
      if (element !== "") {
      // Add the required details to the result array
      //            [Email, Name,   date,       Absence type]
        result.push([row[0],row[1], data[0][j], element     ]);
      }
    }
  }
  /**Join the values from columns 1, 3& 4 and add this as a 5th column, then filter this array
   * to extract only the new rows which have not yet been added to the calendar
   */
  var addToCalendar = result.map(function(row){
    return row.concat([row[0],row[2],row[3]].join(''));
  }).filter(rowA => !originalData.some(rowB => rowA[4] === rowB[3])).map(rowA => rowA.slice(0, 5));

  //Now let's construct the event title and add these events to the calendar
  let eventsArray = [];
  for (var i = 0; i < addToCalendar.length; i++) {
    let row = addToCalendar[i];
    let element = row[3];
    let date = row[2];
      // Add the element to the result array
      if(typeof element ==="number"){
        text = row[1] + ' (VL ' + element + ' day)';
      } else {
        text = row[1] + ' (Sick Leave)';
      }
    let event = cal.createAllDayEvent(text,new Date(date));
        event.setColor("5");
    eventsArray.push([row[0], date, element, text, event.getId()]);
  }

  //Finally, we have to add this array to the end of the original array in the spreadsheet. And we let 

  eventsSheet.getRange(eventsSheet.getDataRange().getLastRow()+1,1,eventsArray.length,5).setValues(eventsArray);
  let plural='';
  if(eventsArray.length>1){plural = 's'}
    SpreadsheetApp.getActiveSpreadsheet().toast(eventsArray.length + ' event'+ plural +' added to calendar', 'Status',2);
}
